/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.DoctorDirectory;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author mahith
 */
public class DoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorJPanel
     */
    
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    DoctorDirectory doctorDirectory;
    EncounterHistory encounterHistory;
    Person doctor;
    JSplitPane splitPane;
    
    public DoctorJPanel(Person person, PersonDirectory personDirectory,PatientDirectory patientDirectory, DoctorDirectory doctorDirectory, JSplitPane splitPane){
        initComponents();
        this.doctor = person;
        this.patientDirectory=patientDirectory;
        this.personDirectory=personDirectory;
        this.doctorDirectory =doctorDirectory;
        this.splitPane = splitPane;
        
        encounterHistory = new EncounterHistory();
        
        lblDoctor.setText("Welcome Dr. "+doctor.getFirstName());
        btnView.setVisible(false);
        encounterPanel.setVisible(false);
        btnEncounter.setVisible(false);
        
        Patient patientDaniel = patientDirectory.addPatient();
        patientDaniel.setFirstName("Daniel_P");
        
        Patient patientKal = patientDirectory.addPatient();
        patientKal.setFirstName("Kal_P");
        
        Patient patientBug = patientDirectory.addPatient();
        patientBug.setFirstName("Bug_P");
        patientBug.setUserID("Bug_P@patient");
        
        Person personBug = personDirectory.addPerson();
        personBug.setFirstName("Bug_P");
        personBug.setUserID("Bug_P@patient");
        
        Encounter encounterBug = encounterHistory.addEncounter();
        encounterBug.setDoctorName("John");
        encounterBug.setPatientName("Bug_P");
        
        encounterBug.setEncounterDate("31-Dec-1998");
        encounterBug.setSystole(100);
        encounterBug.setDiastole(100);
        encounterBug.setPreDiet(100);
        encounterBug.setPostDiet(100);
        encounterBug.setHeartRate(72);
        encounterBug.setComments("Very Healthy condition");
        
        Encounter encounterBug2 = encounterHistory.addEncounter();
        encounterBug2.setDoctorName("John");
        encounterBug2.setPatientName("Bug_P");
        
        encounterBug2.setEncounterDate("31-Dec-2000");
        encounterBug2.setSystole(120);
        encounterBug2.setDiastole(80);
        encounterBug2.setPreDiet(110);
        encounterBug2.setPostDiet(160);
        encounterBug2.setHeartRate(70);
        encounterBug2.setComments("Improvement Needed");
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDoctor = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEncounters = new javax.swing.JTable();
        encounterPanel = new javax.swing.JPanel();
        lblBP = new javax.swing.JLabel();
        txtSystole = new javax.swing.JTextField();
        lblSystole = new javax.swing.JLabel();
        lblDiastole = new javax.swing.JLabel();
        txtDiastole = new javax.swing.JTextField();
        lblDiabetes = new javax.swing.JLabel();
        lblPreDiet = new javax.swing.JLabel();
        txtPreDiet = new javax.swing.JTextField();
        lblPostDiet = new javax.swing.JLabel();
        txtPostDiet = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtComments = new javax.swing.JTextArea();
        lblComments = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        btnCURecord = new javax.swing.JButton();
        lblHeight = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblPatientName = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        btnCreatePatient = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnEncounter = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));

        lblDoctor.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        lblDoctor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblSearch.setText("Search Patient");

        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Patient"
            }
        ));
        jScrollPane1.setViewportView(tblPatients);

        tblEncounters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Encounter"
            }
        ));
        jScrollPane2.setViewportView(tblEncounters);

        lblBP.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblBP.setText("BP:");

        lblSystole.setText("Systole");

        lblDiastole.setText("Diastole");

        lblDiabetes.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblDiabetes.setText("Diabetes:");

        lblPreDiet.setText("Pre Diet");

        lblPostDiet.setText("Post Diet");

        txtComments.setColumns(20);
        txtComments.setRows(5);
        jScrollPane3.setViewportView(txtComments);

        lblComments.setText("Comments");

        lblHeartRate.setText("Heart Rate");

        btnCURecord.setText("Create/Update");
        btnCURecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCURecordActionPerformed(evt);
            }
        });

        lblHeight.setText("Height");

        lblWeight.setText("Weight");

        lblPatientName.setText("Patient Name");

        javax.swing.GroupLayout encounterPanelLayout = new javax.swing.GroupLayout(encounterPanel);
        encounterPanel.setLayout(encounterPanelLayout);
        encounterPanelLayout.setHorizontalGroup(
            encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encounterPanelLayout.createSequentialGroup()
                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encounterPanelLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(encounterPanelLayout.createSequentialGroup()
                                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPreDiet)
                                    .addComponent(lblComments)
                                    .addComponent(lblHeartRate)
                                    .addComponent(lblSystole)
                                    .addComponent(lblBP, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHeight))
                                .addGap(30, 30, 30)
                                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(encounterPanelLayout.createSequentialGroup()
                                        .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPreDiet, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(encounterPanelLayout.createSequentialGroup()
                                                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSystole, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                                    .addComponent(txtHeight))
                                                .addGap(28, 28, 28)
                                                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblDiastole)
                                                    .addComponent(lblPostDiet)
                                                    .addComponent(lblWeight))))
                                        .addGap(18, 18, 18)
                                        .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtDiastole, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                            .addComponent(txtPostDiet, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                            .addComponent(txtWeight)))))
                            .addComponent(lblDiabetes)
                            .addGroup(encounterPanelLayout.createSequentialGroup()
                                .addComponent(lblPatientName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPatientName))))
                    .addGroup(encounterPanelLayout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(btnCURecord)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        encounterPanelLayout.setVerticalGroup(
            encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encounterPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientName)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeight)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWeight)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblBP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encounterPanelLayout.createSequentialGroup()
                        .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSystole)
                            .addComponent(txtSystole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiastole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiastole))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDiabetes)
                        .addGap(18, 18, 18)
                        .addComponent(lblPreDiet)
                        .addGap(18, 18, 18)
                        .addComponent(lblHeartRate))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encounterPanelLayout.createSequentialGroup()
                        .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPreDiet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPostDiet)
                            .addComponent(txtPostDiet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(encounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComments))
                .addGap(30, 30, 30)
                .addComponent(btnCURecord)
                .addGap(17, 17, 17))
        );

        btnCreatePatient.setText("Create Encounter");
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnEncounter.setText("View Encounter");
        btnEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterActionPerformed(evt);
            }
        });

        btnLogOut.setText("Logout");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSearch)
                        .addGap(27, 27, 27)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encounterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addGap(0, 429, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnEncounter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreatePatient)
                        .addGap(32, 32, 32))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogOut)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(btnLogOut)
                .addGap(18, 18, 18)
                .addComponent(lblDoctor)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnEncounter)
                    .addComponent(btnCreatePatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnView)
                        .addGap(18, 18, 18)
                        .addComponent(encounterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchText = txtSearch.getText();
        
        ArrayList<Patient> patientList =  patientDirectory.searchPatient(searchText);
        
        if(patientList.isEmpty()){
            JOptionPane.showMessageDialog(this, "No Results Found!");

        }else{
            
            populateSearchResults(patientList);
            btnView.setVisible(true);
            
            txtPatientName.setText("");
            txtHeight.setText("");
            txtWeight.setText("");
            txtSystole.setText("");
            txtDiastole.setText("");
            txtPreDiet.setText("");
            txtPostDiet.setText("");
            txtHeartRate.setText("");
            txtComments.setText("");
            
            DefaultTableModel model = (DefaultTableModel) tblEncounters.getModel();
            model.setRowCount(0);
            
            
        }    
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex  = tblPatients.getSelectedRow();
        
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select a Row to View");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        String selectedPatient = (String) model.getValueAt(selectedRowIndex,0);
        
        ArrayList<Encounter> encounterList =  encounterHistory.searchEncounter(selectedPatient);
        populateEncounterResults(encounterList);
        btnEncounter.setVisible(true);
        btnView.setVisible(false);
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex  = tblEncounters.getSelectedRow();
        
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select a Row to View");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblEncounters.getModel();
        String selectedEncounterDate = (String) model.getValueAt(selectedRowIndex,0);
        encounterPanel.setVisible(true);
        Encounter encounter =  encounterHistory.getEncounter(selectedEncounterDate);
        Patient patient = patientDirectory.getPatient(encounter.getPatientName());
        if(patient!=null){
            txtPatientName.setText(encounter.getPatientName());
            txtWeight.setText(String.valueOf(patient.getWeight()));
            txtHeight.setText(String.valueOf(patient.getHeight()));
        }
        
        txtSystole.setText(String.valueOf(encounter.getSystole()));
        txtDiastole.setText(String.valueOf(encounter.getDiastole()));
        txtPreDiet.setText(String.valueOf(encounter.getPreDiet()));
        txtPostDiet.setText(String.valueOf(encounter.getPostDiet()));
        txtHeartRate.setText(String.valueOf(encounter.getHeartRate()));
        txtComments.setText(encounter.getComments());
  
    }//GEN-LAST:event_btnEncounterActionPerformed

    private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed
        // TODO add your handling code here:
        encounterPanel.setVisible(true);
        
        txtPatientName.setText("");
        txtHeight.setText("");
        txtWeight.setText("");
        txtSystole.setText("");
        txtDiastole.setText("");
        txtPreDiet.setText("");
        txtPostDiet.setText("");
        txtHeartRate.setText("");
        txtComments.setText("");

    }//GEN-LAST:event_btnCreatePatientActionPerformed

    private void btnCURecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCURecordActionPerformed
        // TODO add your handling code here:
        //Creating a New Patient
        String midUserID="";
        Encounter encounter;
        if(!personDirectory.isExist(txtPatientName.getText()+"@patient")){////new patient --create new patient obj
            
            Patient patient = patientDirectory.addPatient();
            patient.setFirstName(txtPatientName.getText());
            patient.setHeight(Integer.valueOf(txtHeight.getText()));
            patient.setWeight(Integer.valueOf(txtWeight.getText()));
            patient.setUserID(txtPatientName.getText()+"@patient");
            patient.setPassword("password");
            
            Person newPatient = personDirectory.addPerson();
            newPatient.setUserID(txtPatientName.getText()+"@patient");
            newPatient.setPassword("password");
            newPatient.setFirstName(txtPatientName.getText());
            
            encounter = encounterHistory.addEncounter();
                    //get todays date
                    LocalDate today = java.time.LocalDate.now();
                    encounter.setEncounterDate(today.toString());
                    encounter.setDoctorName(doctor);
                encounter.setPatientName(txtPatientName.getText());
                encounter.setSystole(Integer.valueOf(txtSystole.getText()));
                encounter.setDiastole(Integer.valueOf(txtDiastole.getText()));
                encounter.setHeartRate(Integer.valueOf(txtHeartRate.getText()));

                encounter.setPreDiet(Integer.valueOf(txtPreDiet.getText()));
                encounter.setPostDiet(Integer.valueOf(txtPostDiet.getText()));
                encounter.setComments(txtComments.getText());
        }else{
            
            
            encounter = encounterHistory.encounterExist(txtPatientName.getText());
            if(encounter!=null){
                encounter.setDoctorName(doctor);
                encounter.setPatientName(txtPatientName.getText());
                encounter.setSystole(Integer.valueOf(txtSystole.getText()));
                encounter.setDiastole(Integer.valueOf(txtDiastole.getText()));
                encounter.setHeartRate(Integer.valueOf(txtHeartRate.getText()));

                encounter.setPreDiet(Integer.valueOf(txtPreDiet.getText()));
                encounter.setPostDiet(Integer.valueOf(txtPostDiet.getText()));
                encounter.setComments(txtComments.getText());
            }}
                
                
            }else{
                    int count = personDirectory.nameCount(txtPatientName.getText());
                    while(count!=0){
                        midUserID+="1";
                    }
                    Patient patient = patientDirectory.addPatient();
                    patient.setFirstName(txtPatientName.getText());
                    patient.setHeight(Integer.valueOf(txtHeight.getText()));
                    patient.setWeight(Integer.valueOf(txtWeight.getText()));
                    patient.setUserID(txtPatientName.getText()+midUserID+"@patient");
                    patient.setPassword("password");

                    Person newPatient = personDirectory.addPerson();
                    newPatient.setUserID(txtPatientName.getText()+midUserID+"@patient");
                    newPatient.setPassword("password");
                    newPatient.setFirstName(txtPatientName.getText());
                    
                    encounter = encounterHistory.addEncounter();
                    //get todays date
                    LocalDate today = java.time.LocalDate.now();
                    encounter.setEncounterDate(today.toString());
                    
                    
            }
            
            
        }
        
        
        //Creating Vital Signs
        String selectedEncounterDate="";
        try{
            int selectedRowIndex  = tblEncounters.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) tblEncounters.getModel();
            selectedEncounterDate = (String) model.getValueAt(selectedRowIndex,0);
        }catch(Exception e){
            
        }
        
        
//        Encounter encounterExist =  encounterHistory.getEncounter(selectedEncounterDate);
//        Encounter encounter;
//        if(encounterExist!=null){
//              encounter =encounterExist;
//        }else{
//            encounter = encounterHistory.addEncounter();
//            //get todays date
//            LocalDate today = java.time.LocalDate.now();
//            encounter.setEncounterDate(today.toString());
//        }
        
        
        
        
        JOptionPane.showMessageDialog(this, "Patient with ID"+txtPatientName.getText()+midUserID+" Created/Updated");
        txtPatientName.setText("");
        txtHeight.setText("");
        txtWeight.setText("");
        txtSystole.setText("");
        txtDiastole.setText("");
        txtPreDiet.setText("");
        txtPostDiet.setText("");
        txtHeartRate.setText("");
        txtComments.setText("");
        DefaultTableModel clearEncounter = (DefaultTableModel) tblEncounters.getModel();
        clearEncounter.setRowCount(0);
        
        DefaultTableModel clearPatientRecords = (DefaultTableModel) tblPatients.getModel();
        clearPatientRecords.setRowCount(0);
    }//GEN-LAST:event_btnCURecordActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        LoginJPanel login = new LoginJPanel(personDirectory,patientDirectory,doctorDirectory,splitPane);
        splitPane.setRightComponent(login);
    }//GEN-LAST:event_btnLogOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCURecord;
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnEncounter;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JPanel encounterPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblComments;
    private javax.swing.JLabel lblDiabetes;
    private javax.swing.JLabel lblDiastole;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPostDiet;
    private javax.swing.JLabel lblPreDiet;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSystole;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable tblEncounters;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextArea txtComments;
    private javax.swing.JTextField txtDiastole;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPostDiet;
    private javax.swing.JTextField txtPreDiet;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSystole;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void populateSearchResults(ArrayList<Patient> patientDirectory){
        //this function is used to populate the items matching the search content
        
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        model.setRowCount(0);
        
        for(Patient patient: patientDirectory){
            
            Object[] Row =new Object[1];
            Row[0] = patient.getFirstName();
            
            model.addRow(Row);
        }
    }
    
    private void populateEncounterResults(ArrayList<Encounter> encounterList){
        //this function is used to populate the items matching the search content
        
        DefaultTableModel model = (DefaultTableModel) tblEncounters.getModel();
        model.setRowCount(0);
        
        for(Encounter encounter: encounterList){
            
            Object[] Row =new Object[1];
            Row[0] = encounter.getEncounterDate();
            
            model.addRow(Row);
        }
    }


}
